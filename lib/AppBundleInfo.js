// Generated by CoffeeScript 1.10.0
(function() {
  var AndroidAppBundleInfo, Lock, fs, fstream, glob, path, stream, tmp, yauzl;

  yauzl = require('yauzl');

  fs = require('fs-extra');

  stream = require('stream');

  tmp = require('tmp');

  glob = require('glob');

  Lock = require('lock');

  fstream = require('fstream');

  path = require('path');

  AndroidAppBundleInfo = (function() {
    function AndroidAppBundleInfo(pathOrStream) {
      this.pathOrStream = pathOrStream;
      this.extracted = false;
      this.lock = new Lock();
      this.type = 'general';
      this.tmpPath = null;
      this.sourcePath = pathOrStream instanceof stream.Readable ? pathOrStream.path : pathOrStream;
    }

    AndroidAppBundleInfo.prototype.clearContents = function(callback) {
      callback = callback || function() {};
      if (this.extracted) {
        return fs.remove(this.extractPath, (function(_this) {
          return function(err) {
            if (err) {
              return callback(err);
            }
            _this.extracted = false;
            return callback();
          };
        })(this));
      } else {
        return callback();
      }
    };

    AndroidAppBundleInfo.prototype._extractContents = function(_callback) {
      var callback;
      if (this.extracted) {
        return _callback();
      }
      callback = (function(_this) {
        return function(err) {
          if (!_this.tmpPath) {
            return _callback(err);
          }
          return fs.remove(_this.tmpPath, function() {
            return _callback(err);
          });
        };
      })(this);
      return this.lock('extract', (function(_this) {
        return function(release) {
          callback = release(callback);
          return _this._getFilePath(function(err, zippath) {
            if (err) {
              return callback(err);
            }
            return tmp.dir(function(err, extractPath) {
              if (err) {
                return callback(err);
              }
              _this.extractPath = extractPath;
              return yauzl.open(zippath, function(err, zipfile) {
                if (err) {
                  return callback(err);
                }
                zipfile.on('error', callback);
                zipfile.on('entry', function(entry) {
                  if (/\/$/.test(entry.fileName)) {
                    return;
                  }
                  return zipfile.openReadStream(entry, function(err, readStream) {
                    var filePath;
                    filePath = path.join(extractPath, entry.fileName);
                    return fs.ensureDir(path.dirname(filePath), function(err) {
                      if (err) {
                        return callback(err);
                      }
                      return readStream.pipe(fs.createWriteStream(filePath));
                    });
                  });
                });
                return zipfile.on('close', function() {
                  _this.extracted = true;
                  return callback();
                });
              });
            });
          });
        };
      })(this));
    };

    AndroidAppBundleInfo.prototype._getFilePath = function(callback) {
      if (this.pathOrStream instanceof stream.Readable) {
        return tmp.file((function(_this) {
          return function(err, file) {
            if (err) {
              return callback(err);
            }
            _this.tmpPath = file;
            return _this.pathOrStream.pipe(fs.createWriteStream(file)).on('close', function() {
              return callback(null, file);
            }).on('error', callback);
          };
        })(this));
      } else {
        return callback(null, this.pathOrStream);
      }
    };

    AndroidAppBundleInfo.prototype.findFileStream = function(matchFile, callback) {
      return this._extractContents((function(_this) {
        return function(err) {
          var searchPattern;
          if (err) {
            return callback(err);
          }
          searchPattern = _this.extractPath + '/' + matchFile;
          return glob(searchPattern, function(err, files) {
            if (err) {
              return callback(err);
            }
            if (files.length === 0) {
              return callback(new Error('no file found for \'' + matchFile + '\''));
            }
            return callback(null, fs.createReadStream(files[0]));
          });
        };
      })(this));
    };

    AndroidAppBundleInfo.prototype.loadInfo = function(callback) {
      return callback(new Error('not implemented'));
    };

    AndroidAppBundleInfo.prototype.getIdentifier = function() {
      return null;
    };

    AndroidAppBundleInfo.prototype.getName = function() {
      return null;
    };

    AndroidAppBundleInfo.prototype.getVersionName = function() {
      return null;
    };

    AndroidAppBundleInfo.prototype.getVersionCode = function() {
      return null;
    };

    return AndroidAppBundleInfo;

  })();

  module.exports = AndroidAppBundleInfo;

}).call(this);
