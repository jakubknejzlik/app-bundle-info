// Generated by CoffeeScript 1.10.0
(function() {
  var AndroidAppBundleInfo, AppBundleInfo, BinaryXML, apkParser, stream, streamToBuffer,
    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;

  AppBundleInfo = require('./AppBundleInfo');

  stream = require('stream');

  streamToBuffer = require('stream-to-buffer');

  apkParser = require('apk-parser3');

  BinaryXML = require('./BinaryXML');

  AndroidAppBundleInfo = (function(superClass) {
    extend(AndroidAppBundleInfo, superClass);

    AndroidAppBundleInfo.prototype.manifestPath = 'AndroidManifest.xml';

    function AndroidAppBundleInfo(pathOrStream) {
      AndroidAppBundleInfo.__super__.constructor.call(this, pathOrStream);
      this._infoLoaded = false;
      this._info = {};
      this.type = 'android';
    }

    AndroidAppBundleInfo.prototype._loadFileInfo = function(callback) {
      if (this._infoLoaded) {
        return callback();
      }
      return this.findFileStream(this.manifestPath, (function(_this) {
        return function(err, fileStream) {
          if (err) {
            return callback(err);
          }
          return streamToBuffer(fileStream, function(err, data) {
            var bxml;
            bxml = new BinaryXML(data);
            _this._info.manifest = bxml.simpleParse().manifest;
            _this._infoLoaded = true;
            return callback();
          });
        };
      })(this));
    };

    AndroidAppBundleInfo.prototype.loadInfo = function(callback) {
      return this.getManifest(callback);
    };

    AndroidAppBundleInfo.prototype.getManifest = function(callback) {
      return this._loadFileInfo((function(_this) {
        return function(err) {
          if (err) {
            return callback(err);
          }
          return callback(null, _this._info.manifest);
        };
      })(this));
    };

    AndroidAppBundleInfo.prototype.getIconFile = function(callback) {
      const _this = this;
      apkParser(this.sourcePath, function(err, datas){
        if(err) {
          return callback(err);
        }
        var densities = datas.densities.replace(/'/g, '');
        const availablesDensities = densities.split(" ").map(function(d){ return parseInt(d)}).filter(function(d){ return d > 0});
        if(availablesDensities.length == 0){
          return callback(new Error("No density found in manifest"));
        }
        const keyIcon = "application-icon-" + availablesDensities[availablesDensities.length - 1];
        const pathIcon = datas[keyIcon].replace(/'/g, '');
        
        return _this.findFileStream(pathIcon, function(err, datas) {
          return callback(err, datas);
        });
      });
    };

    AndroidAppBundleInfo.prototype.getIdentifier = function() {
      var ref, ref1;
      return (ref = this._info) != null ? (ref1 = ref.manifest) != null ? ref1["package"] : void 0 : void 0;
    };

    AndroidAppBundleInfo.prototype.getName = function() {
      var ref, ref1;
      return (ref = this._info) != null ? (ref1 = ref.manifest) != null ? ref1["package"] : void 0 : void 0;
    };

    AndroidAppBundleInfo.prototype.getVersionName = function() {
      var ref, ref1;
      return (ref = this._info) != null ? (ref1 = ref.manifest) != null ? ref1.versionName : void 0 : void 0;
    };

    AndroidAppBundleInfo.prototype.getVersionCode = function() {
      var ref, ref1;
      return (ref = this._info) != null ? (ref1 = ref.manifest) != null ? ref1.versionCode : void 0 : void 0;
    };

    return AndroidAppBundleInfo;

  })(AppBundleInfo);

  module.exports = AndroidAppBundleInfo;

}).call(this);
