// Generated by CoffeeScript 1.9.3
(function() {
  var AppBundleInfo, bplist, iOSAppBundleInfo, plist, stream, streamToBuffer,
    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;

  AppBundleInfo = require('./AppBundleInfo');

  stream = require('stream');

  streamToBuffer = require('stream-to-buffer');

  plist = require('plist');

  bplist = require('bplist');

  iOSAppBundleInfo = (function(superClass) {
    extend(iOSAppBundleInfo, superClass);

    iOSAppBundleInfo.prototype.plistPath = 'Payload/*.app/Info.plist';

    function iOSAppBundleInfo(pathOrStream) {
      iOSAppBundleInfo.__super__.constructor.call(this, pathOrStream);
      this._infoLoaded = false;
      this._info = {};
      this.type = 'ios';
    }

    iOSAppBundleInfo.prototype._loadFileInfo = function(callback) {
      if (this._infoLoaded) {
        return callback();
      }
      return this.findFileStream(this.plistPath, (function(_this) {
        return function(err, fileStream) {
          if (err) {
            return callback(err);
          }
          return streamToBuffer(fileStream, function(err, data) {
            return _this.parsePlist(data, function(err, plist) {
              if (err) {
                return callback(err);
              }
              _this._info.plist = plist;
              _this._infoLoaded = true;
              return callback();
            });
          });
        };
      })(this));
    };

    iOSAppBundleInfo.prototype.parsePlist = function(data, callback) {
      var e;
      if ('bplist00' !== data.slice(0, 8).toString('ascii')) {
        try {
          return callback(null, plist.parse(data.toString('utf-8')));
        } catch (_error) {
          e = _error;
          return callback(e);
        }
      } else {
        return bplist.parseBuffer(data, function(err, result) {
          if (err) {
            return callback(err);
          }
          return callback(null, result[0]);
        });
      }
    };

    iOSAppBundleInfo.prototype.getPlist = function(callback) {
      return this._loadFileInfo((function(_this) {
        return function(err) {
          if (err) {
            return callback(err);
          }
          return callback(null, _this._info.plist);
        };
      })(this));
    };

    iOSAppBundleInfo.prototype.getIconFile = function(callback) {
      return this.findFileStream('Payload/*.app/AppIcon60x60@*.png', callback);
    };

    return iOSAppBundleInfo;

  })(AppBundleInfo);

  module.exports = iOSAppBundleInfo;

}).call(this);
