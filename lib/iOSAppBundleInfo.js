// Generated by CoffeeScript 1.10.0
(function() {
  var AppBundleInfo, bplist, cgbiToPng, iOSAppBundleInfo, plist, stream, streamToBuffer,
    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;

  AppBundleInfo = require('./AppBundleInfo');

  stream = require('stream');

  streamToBuffer = require('stream-to-buffer');

  plist = require('plist');

  bplist = require('bplist');

  cgbiToPng = require('cgbi-to-png');

  iOSAppBundleInfo = (function(superClass) {
    extend(iOSAppBundleInfo, superClass);

    iOSAppBundleInfo.prototype.plistPath = 'Payload/*.app/Info.plist';

    function iOSAppBundleInfo(pathOrStream) {
      iOSAppBundleInfo.__super__.constructor.call(this, pathOrStream);
      this._infoLoaded = false;
      this._info = {};
      this.type = 'ios';
    }

    iOSAppBundleInfo.prototype._loadFileInfo = function(callback) {
      if (this._infoLoaded) {
        return callback();
      }
      return this.findFileStream(this.plistPath, (function(_this) {
        return function(err, fileStream) {
          if (err) {
            return callback(err);
          }
          return streamToBuffer(fileStream, function(err, data) {
            return _this.parsePlist(data, function(err, plist) {
              if (err) {
                return callback(err);
              }
              _this._info.plist = plist;
              _this._infoLoaded = true;
              return callback();
            });
          });
        };
      })(this));
    };

    iOSAppBundleInfo.prototype.parsePlist = function(data, callback) {
      var e, error;
      if ('bplist00' !== data.slice(0, 8).toString('ascii')) {
        try {
          return callback(null, plist.parse(data.toString('utf-8')));
        } catch (error) {
          e = error;
          return callback(e);
        }
      } else {
        return bplist.parseBuffer(data, function(err, result) {
          if (err) {
            return callback(err);
          }
          return callback(null, result[0]);
        });
      }
    };

    iOSAppBundleInfo.prototype.loadInfo = function(callback) {
      return this.getPlist(callback);
    };

    iOSAppBundleInfo.prototype.getPlist = function(callback) {
      return this._loadFileInfo((function(_this) {
        return function(err) {
          if (err) {
            return callback(err);
          }
          return callback(null, _this._info.plist);
        };
      })(this));
    };

    iOSAppBundleInfo.prototype.getIconFile = function(callback) {
      if(!this._info)
        return callback(new Error("No plist found"));

      var _plist = this._info.plist;
      var self = this;

      function createSubNames(initial, endname) {
        return [
          initial + "@3x"+endname+".png",
          initial + "@2x"+endname+".png"
        ];
      }

      function find(index, lookup, cb) {
        if(!lookup[index])
          return cb(new Error("Icon not found"));

        self.findFileStream('Payload/*.app/' + lookup[index], function(err, stream) {
          if (err)
            return find(index - 1, lookup, cb);
          if (!stream) 
            return cb();
          return cgbiToPng(stream, cb);
        });
      }

      function lookupType(origin, lookup, cb) {
        if(origin && origin.CFBundlePrimaryIcon && origin.CFBundlePrimaryIcon.CFBundleIconFiles) {
          origin.CFBundlePrimaryIcon.CFBundleIconFiles.forEach(function(e) {
            lookup = lookup.concat(createSubNames(e, ""));
          });
          
          return find(lookup.length-1, lookup, cb);
        }
        return cb(new Error("No icons found in plist for this type"));
      }

      lookupType(_plist.CFBundleIcons, [], function(err, datas) {
        if(err)
          return lookupType(_plist['CFBundleIcons~ipad'], ["*60x60@*.png"], callback);
        return callback(err, datas);
      });
    };

    iOSAppBundleInfo.prototype.getIdentifier = function() {
      var ref, ref1;
      return (ref = this._info) != null ? (ref1 = ref.plist) != null ? ref1.CFBundleIdentifier : void 0 : void 0;
    };

    iOSAppBundleInfo.prototype.getName = function() {
      var ref, ref1, ref2, ref3;
      return ((ref = this._info) != null ? (ref1 = ref.plist) != null ? ref1.CFBundleDisplayName : void 0 : void 0) || ((ref2 = this._info) != null ? (ref3 = ref2.plist) != null ? ref3.CFBundleName : void 0 : void 0);
    };

    iOSAppBundleInfo.prototype.getVersionName = function() {
      var ref, ref1;
      return (ref = this._info) != null ? (ref1 = ref.plist) != null ? ref1.CFBundleShortVersionString : void 0 : void 0;
    };

    iOSAppBundleInfo.prototype.getVersionCode = function() {
      var ref, ref1;
      return (ref = this._info) != null ? (ref1 = ref.plist) != null ? ref1.CFBundleVersion : void 0 : void 0;
    };

    return iOSAppBundleInfo;

  })(AppBundleInfo);

  module.exports = iOSAppBundleInfo;

}).call(this);
